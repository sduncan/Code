#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <fcntl.h>
#include <unistd.h>
#include <sys/stat.h>
#include <errno.h>
#include "shell.h"


/*removes extra spaces from the command
  takes a command in the form of a string
  returns the command without any extra spaces
 */
char * rmSpaces(char *cmd) {
  char *last = cmd + strlen(cmd) - 1;
  while (*cmd == ' ')
    cmd++;
  while (*last == ' ')
    last--;
  last++;
  last = NULL;
  return cmd;
}


/* takes a command in the form of a string as a parameter
   if the command redirects stdout, returns 0
   if the command redirects stdin, returns 1
   if the command redirects stdout of one command to stdin of another using a single pipe, returns 2
   if none of these apply, returns -1
*/
int specialCase(char *cmd){
  int ans = -1;
  while(cmd){
    if(*cmd == '>')
      ans = 0;
    if(*cmd == '<')
      ans = 1;
    if(*cmd == '|')
      ans = 2;
    cmd++;
  }
  return ans;
}

//returns location of the command
//note to self: add stderr
char * getLoc(int x, char *cmd){
  char * loc1;
  char * loc = (char *)malloc(256);  
  if (x == 0)
    loc1 = "/bin/";
  else
    loc1 = "/usr/bin/";
  strncat(loc, loc1, strlen(loc1));
  strncat(loc, cmd, strlen(cmd));
  return loc;
}

//takes an array of commands as a paramter and executes the commands
void execute(char** cmds){
  int p;
  int s;
  int scase = specialCase(cmds[0]);
  char * ling;
  ling = (char *) malloc(256);
  ling = cmds[0];

  /*
  //prints all parts of command, for testing
  int i;
  for (i = 0; i < sizeof(cmds); i++){
    printf("cmd: %s\n", cmds[i]);
  }
  */
  
  p = fork();
  if (p == 0){
    //    if(scase == -1){
      int err = execvp(getLoc(0, cmds[0]), cmds);
      if (err < 0)
	err = execvp(getLoc(1, cmds[0]), cmds);   
      else
	wait(&s);
      /*    }
    if(scase == 0){
      ling = strsep(&(cmds[0]), ">");
      int err = execvp(cmds[0] > getLoc(0, ling), cmds);
      if (err < 0)
	err = execvp(cmds[0] > getLoc(1, ling), cmds);   
      else
	wait(&s);
	} */
  }
}

//takes a string of input and puts it into an array of individual command parts
char ** package(char *ling){
  char **cmds;
  cmds = (char **) malloc( 60 * sizeof(char *));
  char *s2;
  s2 = (char *) malloc(256);

  int i = 0;
  while(ling){
    cmds[i] = (char *) malloc(256);
    s2 = strsep(&ling, " \n");
    s2 = rmSpaces(s2);
    if (s2 && s2[0] != '\0'){
      strncpy(cmds[i], s2, 256);
      i++;
    }
  }

  //makes empty slot resulting from \n into NULL
  i = 0;
  for (i = 0; i < 60; i++){
    if (cmds[i])
      if (cmds[i][0] == '\0')
	cmds[i] = NULL;
  }

  return cmds;
}

//promps user for input
char * prompt(){
  char *ling;
  char *string;
  ling = (char *) malloc(256);
  string = (char *) malloc(256);
  printf("DN$  ");
  fgets(ling, 256, stdin);
  if (ling != NULL){
    while(ling){
    string = strsep(&ling, ";");
    execute(package(string));
    printf("reporting!\n");
    }
  }
  return ling;
}
